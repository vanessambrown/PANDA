20.02.2020
setdevicetype.m
usekbqueue = 1 (elseif currentdesigns)
leftkey = 1 (currentdesign for diamond button box for testing today; needs to be adapted for scanning environment in Berlin and Dresden)

modifymePIT.m
expversion = '8.01.200220' --> new version for SFB
devicetype_part1 = 'currentdesignsoffMRT';  
devicetype_part2 = 'currentdesignsoffMRT';  
devicetype_part3 = 'currentdesigns';
devicetype_part4 = 'currentdesignsoffMRT';	


expparams.m
small_screen_berlin_scanning = 0; (because we have no eyetracking anymore and visual angle adaptation to Dresden presentation setup not necessary anymore)
elseif  strcmpi(exploc,'b'); MRITriggerCode	= '5';  (not 5%)

runexperiment.m
removed line (commented already) regarding eyetracker
if strcmpi(exploc,'b') & scanning==1; ShowHideWinTaskbarMex(1); end (letter case sensitive big 'S')

24.02.2020
setup.m
l.105:    small_screen_berlin_scanning = 0;
l.47 %ListenChar(2); due to PTB Warning: Keyboard queue for default keyboard device already in use by KbQueue/KbEvent functions et al. Use of ListenChar/GetChar
etc. and keyboard queues is mutually exclusive! 

pittraining_test.m
changed orde in while loop (l.44: while (GetSecs < tend);... and used "else" instead of "elseif mouse")
to enable respkeys except mouse and joystick (e.g. currentdesigns)

pittraining.m
l.66: if strcmpi(respkey,'mouse') --> if ~strcmpi(respkey,'joystick') (otherwise works for "mouse" only, now also need e.g. "current design")

instrpav.m
l. 10:     tx{i}='Der erste Teil des Experiments ist nun zu Ende. Wir werden Ihnen jetzt den nächsten Teil erklären. Benutzen Sie wieder die Pfeiltasten, um vorwärts und zurück zu blättern.'; (removed passage talking about scanner)

pit.m
l.73:      if ~strcmpi(respkey,'joystick') (was if 'mouse' before, we now need this also for other devices e.g. currentdesign)

setup.m
l. 447ff commendet as we do not need special setup for small screen anymore
% if strcmpi(exploc,'b') && scanning==1 && exppart==3;
% 	yposb = wdh0+.8*wdhb; 
% 	ypost = wdh0+.25*wdhb; 
% 	ypostt= wdh0+.13*wdhb;
% else
	yposb = .8*wdh; 
	ypost = .25*wdh; 
	ypostt=.13*wdh;
% end

27.02.2020
Screen in Belrin muss jetzt geflippt werden: kurzfritsige Lösung ist Screennumber 2 (max...) in Setup; auf Computer Screen erweitern un 2. Screen drehen
Triggercode ist 5% (Scanner sendet 5, aber 5% ist interner Code für Computer) --> in expparams wieder angepasst


03.03.2020
Screen flippen in PTB Code:
In Setup Code included
setup l. 17: small_screen_berlin_scanning = 0

changed instructions as we want to say "abstrakte Formen" and not "abstrakte Bilder" when talking about CSs

04.03.2020
setup.m
need in berlin vertically and horizontally flipped screen! included
mirrorANDupsidedown = 1;  % this is what Berlin needs for MRI setup (flip vertically and horizontally)
and 
                Screen('glScale', wd, 1, -1, 1);
            elseif mirrorANDupsidedown
                Screen('glScale', wd, -1, -1, 1);
            elseif mirror
                Screen('glScale', wd, -1, 1, 1);
            else
                 Screen('glScale', wd, 1, 1, 1);
            end

Dresden needs to adpat!!

05.03.2020
instrpitapproach.m
for if-loops "devicetype = 'joystick'" --> respkey = 'joystick' (instructions adapt for behaviroal and current design joystick
l. 164 and l.237 ~strcmpi(respkey,'joystick') (before it only appeared for devicetype keyboard and not for MRI setup with currentdesignOFFmri button boxes

pittraining_test.m
included joy_fin_pos in while-loop to be adaptive for joysticktyp in part 1 instruction as well :)

For next joystick pilot in DD adapted 

10.03.2020
setup.m
changed sounds electric guitar to koto

expparams.m
implemented response window for PIT 2 sec if no scanning, 3 sec if scanning

20.03.2020

instrpitapproach.m
at the very beginning (if current design joystick) implemented getjoystickpos (as this joystick doesn't send reliable codes)
ToDo: differentiate pull and push movements, as they have different thresholds

28.04.2020
setup:
for debugging
l 46. Hide cursor
l.320 changed text = {'Experimentaufbau',num2str(3+Z.Nps-k)};
--> text = {'Experimentaufbau',num2str(Z.Nps-k)};

builded getjoystick_pos_push and *_pull and implented in instrpitapproach, approachgoactive and apppraochnogo (commented joy_fin_pos_push or *_pull)

pittraining_test.m
included joy_fin_pos_pull and push with |-connections in loop for rescaling and vanishing stimulus

setdevicetype.m
inlcuded dummy variables for devicetype == 'joystick' for no further use while this devicetype is selected, but for making resclaing and vanishing loops work in pittrainig_test.m, pittraining.m and pit.m


11.5.2020
adapted push and pull scripts as push and pull position are not same absolute values. (joy_thresh now joy_thresh_push or _pull) --> accordingly adapted instrpitapproach, approachgoactive and apppraochnogo

implemented changes in pittraining_test.m (training during instructions); pittraining.m

next: adapt pittraining.m (this is not working right now)

12.5.2020
make pittraining work (bugfix ntest instead of nt)
make pit.m work

----------
current design joystick should work now!
I implemented an 8% tolerance for pulling and pushing, respectively.
Calibration: use key s for start and key s for stopp.
I recorde raw data, no normalization. Please check, If velocity variable is still valide
----------

ToDo: 
Pav Correct
payout
check instruction
check if button press version still works
check it scanning procedure still works
bug fix problem in timing with tow screens
check if tones are stiill the one we finally wanted to have :)
GUI instead of modifyme.m



25.5.2020 CE (GUI included in PIT exp. by Maria 9th Jun 2020)
included PIT GUI (via Matlab appdesigner) to set subject-specific task parameter previously saved in modifymePIT.m
Gui called PIT_GUI.mlapp --> double-klick to start; file has to be inside the paradigm folder
The GUI generates a file "guiparams.m" in the experimental folder that is loaded in runexperiment.m (line 7) and is rewritten for every subject.
Variables moved from modifymePIT.m to guiparams.m: subjn, session (day1 vs day2), intervention (no, stress, control) , PIT_version (shells vs leaves), type (Pat vs HC). 
The GUI further includes the "exppart" variable, so that the 4 runs can be started from within the GUI. Therefore, line 13 in file "runexperiment.m" is commented.



27.5.20
setdevcetype.m
elseif strcmpi(devicetype,'joystick')
    respkey  = 'joystick';
    rightkey = 'RightArrow';
    leftkey  = 'LeftArrow';
    usekbqueue = 0;
    % define the thresholds (maximum = 1) for which the stimulus
    % presentation will be modified
    joy_thresh=[.22 .47 .69]; % literature based for range -1:+1 Rinck et al. 20...
    joy_levels=[-100:100]';
    joy_thresh_ind=zeros(size(joy_levels));
    % joy_fin_pos = 0.99;
    joy_fin_pos_push = -0.99; % dummy
    joy_fin_pos_pull = 0.99; % dummy
--> included joy_fin_push and *pull to be adaptive for beharioal joystick

comparesequential.m

crm corrected: cppres: 1 - +10€, 2 - CS-, 3 - -10€, 4 and 5 - drug associated
--> now compute crm for  cppres 1-3 only; 4 and 5 NaN

% Correct? 
if ~isnan(chq(cit)) & cppres (1,cit) <=3 & cppres (2,cit) <=3;
	if     cppres(chq(cit),cit)<=cppres(3-chq(cit),cit); crm(cit) = 1;
	elseif cppres(chq(cit),cit)> cppres(3-chq(cit),cit); crm(cit) = 0;
	end
else 
	crm(cit)=NaN;
end

28.5.2020 (Hao)
pittraining.m
l108ff (changed to avoid unsuccessful joystick collection/withdrawal
                    if joystick_pos{nt}(end)<=joy_fin_pos_push
                        coll_avoid(nt)=-1;
                        %coll_avoid(nt)=round(joystick_pos{nt}(end));
                        
                    else
                        coll_avoid(nt)=1;
                        %coll_avoid(nt)=round(joystick_pos{nt}(end));
                    end

ToDo (9th Jun 2020): 

payout
check instruction
check if button press version still works
check it scanning procedure still works
bug fix problem in timing with tow screens
check if tones are stiill the one we finally wanted to have :)

9th Jun 2020:
test setup at BCAN imaging center
Anzeige dublizieren in Windows
everything works fine :)

ONLY: instructions part 3 are not correctly shown (double lines) --> solution: only mirror, not upside down


expparams.m
if scanning              % Response time window during PIT
nogodelay_pit = 3;  
else
    nogodelay_pit = 2;  --> DD wants 2 sec during PIT, B will stay with 3 sec as before (when scanning)
end


06.08.2020
expparams.m
changed timing window for pit part3 (2sec for joystick, 3 sec for everything else)
if strcmp(respkey,'joystick')              % Response time window during PIT
    nogodelay_pit = 2;
else
    nogodelay_pit = 3;
end

runexperiment.m
Trigger für Joystickversion angepasst:
	    if strcmp(exploc,'b')
                T.fMRI_triggerT0_pit = WaitForMRITrigger_joystick(NumInitialfMRITriggers, Display);
            elseif strcmp(exploc,'d')
                T.fMRI_triggerT0_pit = WaitForMRITrigger(MRITriggerCode, NumInitialfMRITriggers, Display);
            else
                T.fMRI_triggerT0_pit = WaitForMRITrigger(MRITriggerCode, NumInitialfMRITriggers, Display);
            end

und

            if strcmp(exploc,'b')
                T.fMRI_triggerTend_pit = WaitForMRITrigger_joystick(NumFinalfMRITriggers);
            elseif strcmp(exploc,'d')
                T.fMRI_triggerTend_pit = WaitForMRITrigger(MRITriggerCode,NumFinalfMRITriggers);
            else
                T.fMRI_triggerTend_pit = WaitForMRITrigger_joystick(MRITriggerCode,NumFinalfMRITriggers);
            end


03-09-2020
Change the joystick id so that it is adaptable when multiple joysticks are plugged in

- modifymePIT.m: 

line 60-61: 

joyid_ins=0; % instrumental joystick ID
joyid_pit=1; % pit joystick ID


- approachgoactive.m

line 51:[joy_pos, buttons] = mat_joy(joyid_ins);

- approachnogo.m

line 37:[joy_pos, buttons] = mat_joy(joyid_ins);

- getjoystickpos_pull.m

line 14:[joy_pos, buttons] = mat_joy(joyid_ins);

-getjoystickpos_push.m

line 15:[joy_pos, buttons] = mat_joy(joyid_ins);

- getjoystickpos_zero.m

line 14:[joy_pos, buttons] = mat_joy(joyid_ins);

- pit.m
==> try to re-initialize the joystick position to the pit joystick
line 97: add:
[joy_pos, buttons] = mat_joy(joyid_pit);

07.09.2020
included joystick calibration for pit
--> getjoystickpos_pull_instr.m and getjoystickpos_pull_pit.m etc....
adapted instrpitstart.m, instrpitapproach.m, approachgoactive.m, approachnogo.m  pittraining_test.m, pittraining.m and pit.m accordingly

15.09.2020
getjoystickpos_pull_instr.m and getjoystickpos_pull_pit.m 
getjoystickpos_push_instr.m and getjoystickpos_push_pit.m 

line 34 - 35: change joy_thresh_pull/push into joy_thresh_pull/push_instr/pit

getjoystickpos_zero_instr.m and getjoystickpos_zero_pit.m
line 26 change joyzero to joy_zero_instr/pit 

21.09.2020
changed PIT GUI:
1) included scanning varibale (the only one) that can be changed between parts (if subject breaks the scanning session)
--> therefore introduced new varibale to runexperiment: scan (that will be set to scanning after the GUIparams loaded and sets back scanning to scan after loadandcheckpreviousdata was loaded)
2) included site variable and disabled PIT version, day and intervention for DD site

adapted modifymePIT accordingly

11.11.2020
instrpitstart.m
adapted if-loops with devicetype = joystick, as this 'cur_joystick' now (not 'joystick'); used respkey instead (which is alsways 'joystick' irrespective of current design joystick or not

